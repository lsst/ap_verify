# Add-on pipeline designed to be added to ApVerifyWithFakes or ApPipeWithFakes
# for QA purposes.
#
# This pipeline depends on an external pipeline for the coaddName and fakesType
# pipeline parameters.

description: Type conversion tasks customized for AP pipeline
imports:
  - location: $AP_VERIFY_DIR/pipelines/_ingredients/Conversions.yaml
    exclude:
      # Fakes pipeline doesn't produce non-fakes DiaSourceTable.
      - consolidateDiaSourceTable
tasks:
  # TODO: TransformSourceTableTask can't be run until we create a functor
  # config that doesn't depend on shapeHSM.
  # Merging of fakes_source [detector-level] to fakes_sourceTable_visit [visit-level]
  consolidateSourceTable:
    class: lsst.pipe.tasks.postprocess.ConsolidateSourceTableTask
    config:
      # This is output directly by CalibrateImageTask.
      connections.inputCatalogs: initial_stars_detector
      connections.outputCatalog: initial_stars
  # Merging of fakes_*Diff_diaSrcTable [detector-level Parquet] to fakes_diaSourceTable [visit-level]
  consolidateDiaSourceTable:
    class: lsst.pipe.tasks.postprocess.ConsolidateSourceTableTask
    config:
      # Task doesn't support coaddName, so coopt catalogType instead.
      connections.catalogType: parameters.coaddName
      # TODO: hard-code the "fakes_" label because I can't insert two templates,
      # and fakesType is more stable than coaddName.
      connections.inputCatalogs: "fakes_{catalogType}Diff_diaSrcTable"
      connections.outputCatalog: fakes_diaSourceTable
  # Creation of fakes_visitSummary
  consolidateVisitSummary:
    class: lsst.pipe.tasks.postprocess.ConsolidateVisitSummaryTask
    config:
      connections.calexpType: parameters.fakesType
      connections.calexp: "{calexpType}initial_pvi"
      connections.visitSummary: "{calexpType}visitSummary"
      connections.visitSummarySchema: "{calexpType}visitSummary_schema"
  # Conversion of fakes_visitSummary [visit-level afw.table] to fakes_visitTable [instrument-level Parquet]
  makeVisitTable:
    class: lsst.pipe.tasks.postprocess.MakeVisitTableTask
    config:
      connections.calexpType: parameters.fakesType
      connections.visitSummaries: "{calexpType}visitSummary"
  # Conversion of fakes_visitSummary [visit-level afw.table] to fakes_ccdVisitTable [instrument-level Parquet]
      connections.outputCatalog: "{calexpType}visitTable"
  makeCcdVisitTable:
    class: lsst.pipe.tasks.postprocess.MakeCcdVisitTableTask
    config:
      connections.calexpType: parameters.fakesType
      connections.visitSummaryRefs: "{calexpType}visitSummary"
      connections.outputCatalog: "{calexpType}ccdVisitTable"

